// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  username          String       @unique @db.VarChar(50)
  name              String       @db.VarChar(100)
  email             String       @unique @db.VarChar(100)
  password          String       @db.VarChar(255)
  pfp               String?      @db.Text
  banner            String?      @db.Text
  categoryId        Int?
  description       String?      @db.MediumText
  balance           Int          @default(0)
  role              Role         @default(client)
  category          Category?    @relation(fields: [categoryId], references: [id])
  donationsReceived Donation[]   @relation("DonationReceiver")
  // donationsSent     Donation[]   @relation("DonationSender")
  payouts           Payout[]     @relation("PayoutUser")
  milestones        Milestones[] @relation("MilestonesUser")
}

enum Role {
  client
  admin
}

enum Bank {
  bca
  bni
  bri
  mandiri
  btn
  danamon
  bsi
}

enum PayoutStatus {
  pending
  approved
  rejected
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(100)
  users User[]
}

model Donation {
  id                 Int      @id @default(autoincrement())
  order_id           String   @unique
  gross_amount       Int      @default(0)
  senderUsername     String?  @db.VarChar(50) @default("anonymous")
  senderEmail        String?
  senderName         String   @default("Orang Baik")
  senderId           Int?
  receiverUsername   String?  @db.VarChar(50)
  receiverId         Int?  
  payment_type       String?
  transaction_status String   @default("pending")
  message            String?  @db.Text
  transaction_time   DateTime @default(now())
  receiver           User?    @relation("DonationReceiver", fields: [receiverUsername], references: [username])
  // sender             User?    @relation("DonationSender", fields: [senderUsername], references: [username], onUpdate: Cascade)
}

model Milestones {
  id          Int      @id @default(autoincrement())
  target      Int
  current     Int      @default(0)
  userId      Int      @unique
  description String   @db.Text
  timecreated DateTime @default(now())
  user        User     @relation("MilestonesUser", fields: [userId], references: [id])
}

model Payout {
  id          Int      @id @default(autoincrement())
  amount      Int      @default(0)
  username    String       @unique @db.VarChar(50)
  timecreated DateTime @default(now())
  bank        Bank
  description String?   @db.Text
  user        User     @relation("PayoutUser", fields: [username], references: [username])
  status      PayoutStatus   @default(pending)
}